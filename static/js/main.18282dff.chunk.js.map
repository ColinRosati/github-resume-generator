{"version":3,"sources":["components/AppHead.jsx","components/PopularRepo.jsx","components/ResumeFeild.jsx","components/Resume.jsx","components/AppBody.jsx","components/ExozetApp.jsx","App.js","serviceWorker.js","index.js"],"names":["AppHead","className","PopularRepo","props","data","JSON","parse","this","name","language","repo_rights","liscence","year","created_at","slice","pushed_at","description","stars","stargazers_count","forks","link","html_url","key","id","href","React","Component","ResumeFeild","usr","client","usr_name","user_name","usr_bio","user_bio","usr_link","user_link","start_date","user_start","location","user_location","repos","followers","user_followers","Resume","i","state","langauge","unique_langauge","pop_repo","title","repository","error","handleSubmit","bind","e","preventDefault","document","querySelector","value","url_info","fetch","method","then","res","json","owner","login","usr_path","res_repos","length","setState","response","catch","err","console","log","bio","lang","push","langArray","unique_items","filter","index","self","indexOf","items","onSubmit","alt","htmlFor","type","map","popLang","stringify","AppBody","ExozetApp","App","Boolean","window","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+UAYeA,MATf,WAEE,OACE,yBAAKC,UAAU,YAFD,Y,0CCsCHC,G,iBArCX,WAAYC,GAAO,qEACTA,I,sEAIR,IAAIC,EAAOC,KAAKC,MAAMC,KAAKJ,MAAMC,MAC3BI,EAAOJ,EAAKI,KACZC,EAAWL,EAAKK,SAChBC,EAAeN,EAAKO,SACpBC,EAAOR,EAAKS,WAAWC,MAAM,EAAE,GAAK,MAAQV,EAAKW,UAAUD,MAAM,EAAE,GACnEE,EAAcZ,EAAKY,YACnBC,EAAQb,EAAKc,iBACbC,EAAQf,EAAKe,MACbC,EAAQhB,EAAKiB,SACnB,OACE,yBAAKpB,UAAU,mBAAoBqB,IAAKf,KAAKJ,MAAMoB,IAC5ChB,KAAKJ,MAEP,yBAAKF,UAAU,gBACd,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aAAaO,GAC5B,yBAAKP,UAAU,aAAaW,IAE9B,yBAAKX,UAAU,sBACb,yBAAKA,UAAU,aAAaQ,GAC5B,yBAAKR,UAAU,eAAeS,IAEhC,yBAAKT,UAAU,oBAAoBe,GACnC,yBAAKf,UAAU,aAAf,iBAA0CgB,EAA1C,cAA4DE,EAA5D,yGAAwK,uBAAGK,KAAMJ,EAAMnB,UAAU,aAAzB,YACxK,8BAZD,mC,GAlBawB,IAAMC,YC4BjBC,MA3Bf,SAAqBxB,GACjB,IAAMyB,EAAMzB,EAAM0B,OACZC,EAAW3B,EAAM0B,OAAOE,UACxBC,EAAU7B,EAAM0B,OAAOI,SACvBC,EAAW/B,EAAM0B,OAAOM,UACxBC,EAAajC,EAAM0B,OAAOQ,WAAWvB,MAAM,EAAE,GAC7CwB,EAAWnC,EAAM0B,OAAOU,cACxBC,EAAQrC,EAAM0B,OAAOW,MACrBC,EAAYtC,EAAM0B,OAAOa,eAEjC,OACI,yBAAKzC,UAAU,UACZ2B,EAEC,6BACE,4BAAKE,GACL,wBAAI7B,UAAU,aAAa+B,GAC3B,wBAAI/B,UAAU,aAAY,uBAAGuB,KAAMU,GAAWA,IAC9C,wBAAIjC,UAAU,aAAd,mBAA2CmC,EAA3C,KAAyDN,EAAzD,sBAAsFQ,EAAtF,SAAsGE,EAAtG,qBAA+HC,EAA/H,gBALF,oCCuIKE,G,kBAlJX,WAAYxC,GAAO,IAAD,8BACd,4CAAMA,KACDyC,EAAI,EAET,EAAKC,MAAQ,CACXd,UAAW,GACXE,SAAU,GACVM,cAAe,GACfJ,UAAW,GACXW,SAAU,GACVC,gBAAiB,GACjBP,MAAO,GACPE,eAAgB,GAChBL,WAAY,GACZW,SAAU,CACRC,MAAO,GACPC,WAAY,GACZlC,YAAa,GACbC,MAAO,GACPE,MAAO,IAETgC,OAAM,GAER,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAvBN,E,uHA6BLC,GAAG,IAAD,OACbA,EAAEC,iBAEF,IAAM/C,EAAOgD,SAASC,cAAc,aAAaC,MAC3CC,EAAU,gCAAkCnD,EAGlDoD,MAFiB,gCAAkCpD,EAAO,SAE1C,CACdqD,OAAQ,MACR,oBAAqB,SAEtBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAC,GACL,IAAIjC,EAAWiC,EAAI,EAAKnB,GAAGqB,MAAMC,MAC7BC,EAAWJ,EAAI,EAAKnB,GAAGqB,MAAM5C,SAK7B+C,GAJQL,EAAI,EAAKnB,GAAGzB,MACZ4C,EAAI,EAAKnB,GAAG1B,iBACd6C,EAAI,EAAKnB,GAAG5B,YACX+C,EAAI,EAAKnB,GAAGpC,KACPuD,EAAIM,QACpB,EAAKC,SAAU,CACbvC,UAAWD,EACXK,UAAWgC,EACX3B,MAAO4B,EACPG,SAAUR,OAGbS,OAAO,SAACC,GACPC,QAAQC,IAAIF,GACZ,EAAKH,SAAU,CAACnB,OAAO,OAGzBS,MAAMD,EAAU,CACdE,OAAQ,QAETC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MAAM,SAAAC,GACL,IAAI3B,EAAa2B,EAAIlD,WACjB+D,EAAMb,EAAIa,IACVtC,EAAWyB,EAAIzB,SACfG,EAAYsB,EAAItB,UACpB,EAAK6B,SAAS,CACZjC,WAAYD,EACZH,SAAU2C,EACVrC,cAAeD,EACfI,eAAgBD,OAGnB+B,OAAO,SAACC,GACPC,QAAQC,IAAIF,GACZ,EAAKH,SAAU,CAACnB,OAAO,S,8BAYnB0B,GACNtE,KAAKsC,MAAMC,SAASgC,KAAKD,GAEzB,IAAIE,EAAYxE,KAAKsC,MAAMC,SAM3BvC,KAAKyE,aAAeD,EAAUE,QAJd,SAAEvB,EAAOwB,EAAOC,GAC9B,OAAOA,EAAKC,QAAQ1B,KAAWwB,O,+BAO5B,IAAD,OACFG,EAAQ9E,KAAKsC,MAAM0B,SACvB,OAEE,yBAAKtE,UAAU,YACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,2BACb,wBAAIA,UAAU,eAAd,mBACA,0BAAMqF,SAAU/E,KAAK6C,aAAcmC,IAAI,YACnC,2BAAOC,QAAQ,aACf,2BAAOvF,UAAU,WAAWO,KAAK,WAAWiF,KAAK,SACjD,iDAKLJ,EAEO,yBAAKpF,UAAU,qBACb,kBAAC,EAAD,CAAa4B,OAAQtB,KAAKsC,QAC1B,6BACI,yCAEA,wBAAI5C,UAAU,uBAAuBM,KAAKyE,eAG9C,yBAAK/E,UAAU,wBACb,wBAAIA,UAAU,qBAAd,wBACGoF,EAAMK,KAAI,SAAC3B,EAAKmB,GAGb,OAFA,EAAKtC,EAAIsC,EACT,EAAKS,QAAQN,EAAMH,GAAOzE,UACnB,yBAAKa,IAAK+D,EAAMH,GAAO3D,IAAI,kBAAC,EAAD,CAAanB,KAAMC,KAAKuF,UAAUP,EAAMH,IAAS5D,IAAK+D,EAAMH,GAAO3D,WAd/G,yBAAKtB,UAAU,qBAAf,kC,GA1HKwB,IAAMC,Y,MCQZmE,MATf,WACE,OACE,yBAAK5F,UAAU,YACX,wBAAIA,UAAU,iBAAd,iBACA,kBAAC,EAAD,Q,MCKO6F,MATf,WACE,OACE,yBAAK7F,UAAU,cACb,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,MCGS8F,MARf,WACE,OACE,yBAAK9F,UAAU,OACb,kBAAC,EAAD,QCKc+F,QACW,cAA7BC,OAAO3D,SAAS4D,UAEe,UAA7BD,OAAO3D,SAAS4D,UAEhBD,OAAO3D,SAAS4D,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7C,SAAS8C,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,MAAK,SAAA4C,GACjCA,EAAaC,kB","file":"static/js/main.18282dff.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/AppHead.css';\r\n\r\nfunction AppHead() {\r\n    const title = \"e><ozet\"\r\n  return (\r\n    <div className=\"app-head\">\r\n        {title}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppHead;\r\n","import React from 'react';\r\nimport '../styles/PopRepo.css';\r\n\r\n// component that renders all repo details. used for each repo\r\nclass PopularRepo extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n\r\n    render(){\r\n      let data = JSON.parse(this.props.data) //TODO put all these var into constructor for speed\r\n      const name = data.name\r\n      const language = data.language\r\n      const repo_rights =  data.liscence;\r\n      const year = data.created_at.slice(0,4) + \" - \" + data.pushed_at.slice(0,4)\r\n      const description = data.description\r\n      const stars = data.stargazers_count\r\n      const forks = data.forks\r\n      const link =  data.html_url\r\n      return (\r\n        <div className=\"app-popular-repo\"  key={this.props.id}>\r\n            { !this.props\r\n            ?<div></div>\r\n            :<div className=\"repo-wrapper\"  >\r\n              <div className=\"repo-title third\">\r\n                <div className=\"repo-name\">{name}</div>\r\n                <div className=\"repo-year\">{year}</div>\r\n              </div>\r\n              <div className=\"repo-details third\">\r\n                <div className=\"repo-lang\">{language}</div>\r\n                <div className=\"repo-rights\">{repo_rights}</div>\r\n              </div>\r\n              <div className=\"repo-description\">{description}</div>\r\n              <div className=\"repo-copy\">This repo has {stars} stars and {forks} forks. If you would like more information about this repository and my contributed code please visit <a href={link} className=\"repo-name\">my site</a></div>\r\n              <hr/>\r\n            </div>\r\n            }\r\n        </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default PopularRepo;\r\n","import React from 'react';\r\nimport RepoLanguage from './RepoLanguage';\r\nimport '../styles/PopRepo.css';\r\n\r\n// component that renders all user resume details\r\nfunction ResumeFeild(props) {\r\n    const usr = props.client\r\n    const usr_name = props.client.user_name;\r\n    const usr_bio = props.client.user_bio;\r\n    const usr_link = props.client.user_link;\r\n    const start_date = props.client.user_start.slice(0,4);\r\n    const location = props.client.user_location;\r\n    const repos = props.client.repos;\r\n    const followers = props.client.user_followers;\r\n\r\n  return (\r\n      <div className=\"resume\">\r\n      { !usr\r\n        ? <div > </div>\r\n        : <div>\r\n            <h3>{usr_name}</h3>\r\n            <h5 className=\"secondary\">{usr_bio}</h5>\r\n            <h5 className=\"secondary\"><a href={usr_link}>{usr_link}</a ></h5>\r\n            <h5 className=\"secondary\">On Github since {start_date}, {usr_name} is a developer in {location} with {repos} public repos and {followers} followers.</h5>\r\n          </div>\r\n\r\n      }\r\n      </div>\r\n     \r\n  );\r\n}\r\n\r\nexport default ResumeFeild;\r\n","import React from 'react';\r\nimport PopularRepo from './PopularRepo'\r\nimport ResumeFeild from './ResumeFeild'\r\nimport '../styles/Resume.css';\r\n\r\n// Search feild create github api call from search input form\r\nclass Resume extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.i = 1\r\n        let unique_items;\r\n        this.state = { // create state object of all api details\r\n          user_name: '',\r\n          user_bio: '',\r\n          user_location: '',\r\n          user_link: '',\r\n          langauge: [],\r\n          unique_langauge: [],\r\n          repos: '',\r\n          user_followers: '',\r\n          user_start: '',\r\n          pop_repo: {\r\n            title: '',\r\n            repository: '',\r\n            description: '',\r\n            stars: '',\r\n            forks: ''\r\n          },\r\n          error:false\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n    }\r\n\r\n    handleSubmit(e){ // submit search api call\r\n      e.preventDefault();\r\n\r\n      const name = document.querySelector(\".username\").value\r\n      const url_info= 'https://api.github.com/users/' + name\r\n      const url_repo = 'https://api.github.com/users/' + name + '/repos'\r\n\r\n      fetch(url_repo, {\r\n        method: 'GET',\r\n        'X-RateLimit-Limit': '5000'\r\n      })\r\n      .then( res => res.json()) // coherse into JSON\r\n      .then( res => { // put all repo data into state\r\n        let usr_name = res[this.i].owner.login\r\n        let usr_path = res[this.i].owner.html_url\r\n        let forks = res[this.i].forks\r\n        let stars = res[this.i].stargazers_count\r\n        let des = res[this.i].description\r\n        let name = res[this.i].name\r\n        let res_repos = res.length\r\n        this.setState( {\r\n          user_name: usr_name,\r\n          user_link: usr_path,\r\n          repos: res_repos,\r\n          response: res\r\n        })\r\n      })\r\n      .catch( (err)=> { // catch any error, set state error\r\n        console.log(err); \r\n        this.setState( {error: true}) //TODO handle error catch statments\r\n      })\r\n\r\n      fetch(url_info, { // second api call\r\n        method: 'GET'\r\n      })\r\n      .then( res => res.json())\r\n      .then( res => { // put all info data into state\r\n        let start_date = res.created_at;\r\n        let bio = res.bio;\r\n        let location = res.location;\r\n        let followers = res.followers;\r\n        this.setState({\r\n          user_start: start_date,\r\n          user_bio: bio,\r\n          user_location: location,\r\n          user_followers: followers\r\n\r\n      })})\r\n      .catch( (err)=> {\r\n        console.log(err);\r\n        this.setState( {error: true}) //TODO handle error catch statments\r\n      })\r\n\r\n    }\r\n\r\n\r\n    // push languages into langauge state\r\n    // sort langauges into unique langauges\r\n    // count all repeating langauges\r\n    // make percentage out from total_repo/repeat_language\r\n    // TODO finish this component features and style\r\n    // TODO handle all repo langauge into async component\r\n    popLang(lang){ \r\n      this.state.langauge.push(lang) // push all languges\r\n\r\n      let langArray = this.state.langauge // language local array\r\n\r\n      const _unique = ( value, index, self) => { // return only unique values\r\n        return self.indexOf(value) === index;\r\n      }\r\n\r\n      this.unique_items = langArray.filter(_unique); // filter logic to remove repeating\r\n    }\r\n\r\n//TODO put all this form into seperate component\r\n  render(){ // handle API data here. render each array object into DOM elements\r\n    let items = this.state.response;\r\n    return (\r\n\r\n      <div className=\"app-body\">\r\n      <div className=\"app-body-search\">   \r\n        <div className=\"app-body-search-wrapper\">\r\n          <h2 className=\"search-head\">Github username</h2>\r\n          <form onSubmit={this.handleSubmit} alt=\"username\">\r\n              <label htmlFor=\"username\"></label>\r\n              <input className=\"username\" name=\"username\" type=\"text\"></input>\r\n              <button> generate </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n      { !items  // ternery conditional render items\r\n              ? <div className=\"app-results-feild\">Search valid github users</div>\r\n              : <div className=\"app-results-feild\">\r\n                  <ResumeFeild client={this.state}/>\r\n                  <div>\r\n                      <h4>Langauges</h4>\r\n                      \r\n                      <h5 className=\"langauges secondary\">{this.unique_items}</h5> \r\n                  </div>\r\n\r\n                  <div className=\"repo-results-wrapper\">\r\n                    <h5 className=\"repo-header-title\">Popular Repositories</h5>\r\n                      {items.map((res, index) => {\r\n                          this.i = index\r\n                          this.popLang(items[index].language)\r\n                          return <div key={items[index].id}><PopularRepo data={JSON.stringify(items[index])} key={items[index].id} /></div>\r\n                        })\r\n                      }\r\n                  </div>\r\n              </div>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Resume;\r\n","import React from 'react';\r\nimport Resume from './Resume'\r\n// import ResultsFeild from './ResultsFeild'\r\nimport '../styles/AppBody.css';\r\n\r\nfunction AppBody() {\r\n  return (\r\n    <div className=\"app-body\">\r\n        <h1 className=\"app-body-head\">Github Resume</h1>\r\n        <Resume/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppBody;\r\n","import React from 'react';\r\nimport AppHead from './AppHead'\r\nimport AppBody from './AppBody'\r\nimport '../styles/App.css';\r\n\r\nfunction ExozetApp() {\r\n  return (\r\n    <div className=\"exozet-app\">\r\n      <AppHead/>\r\n      <AppBody/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExozetApp;\r\n","import React from 'react';\nimport ExozetApp from './components/ExozetApp'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ExozetApp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}